<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- Resource Bundle -->

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>

	<!-- View Handler -->

	<!--
		For the basic mapping of a view to a location, simply set a prefix and
		a suffix on the InternalResourceViewResolver. So we modify the
		'springapp-servlet.xml' and declare a 'viewResolver' entry. By
		choosing the JstlView, it will enable us to use JSTL in combination
		with message resource bundles as well as provide us with the support
		for internationalization.
	-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- Controller -->
	<bean name="/hello.htm"
		class="org.landal.mvcsample.web.controller.InventoryController">
		<property name="productManager" ref="productManager" />
	</bean>

	<!-- Definizione del SimpleFormController
		We define objects to inject into properties for commandClass and validator. We also specify two views, a
		formView that is used for the form and a successView that we will go to after successful form processing. The
		latter can be of two types. It can be a regular view reference that is forwarded to one of our JSP pages. One
		disadvantage with this approach is, that if the user refreshes the page, the form data is submitted again, and you
		would end up with a double price increase. An alternative way is to use a redirect, where a response is sent
		back to the users browser instructing it to redirect to a new URL. The URL we use in this case can't be one of
		our JSP pages, since they are hidden from direct access. It has to be a URL that is externally reachable. We
		have chosen to use 'hello.htm' as my redirect URL. This URL maps to the 'hello.jsp' page, so this should
		work nicely.	
	 -->
	<bean name="/priceincrease.htm" class="org.landal.mvcsample.web.controller.PriceIncreaseFormController">
		<property name="sessionForm" value="true" />
		<property name="commandName" value="priceIncrease" />
		<property name="commandClass" value="org.landal.mvcsample.service.PriceIncrease" />
		<property name="validator">
			<bean class="org.landal.mvcsample.web.validator.PriceIncreaseValidator" />
		</property>
		<property name="formView" value="priceincrease" />
		<property name="successView" value="hello.htm" />
		<property name="productManager" ref="productManager" />
	</bean>

	<!-- Service Layer -->

	<bean id="productManager"
		class="org.landal.mvcsample.service.impl.SimpleProductManager">
		<property name="products">
			<list>
				<ref bean="product1" />
				<ref bean="product2" />
				<ref bean="product3" />
			</list>
		</property>
	</bean>

	<!-- Domain Mock Object -->
	<bean id="product1" class="org.landal.mvcsample.domain.Product">
		<property name="description" value="Lamp" />
		<property name="price" value="5.75" />
	</bean>
	<bean id="product2" class="org.landal.mvcsample.domain.Product">
		<property name="description" value="Table" />
		<property name="price" value="75.25" />
	</bean>
	<bean id="product3" class="org.landal.mvcsample.domain.Product">
		<property name="description" value="Chair" />
		<property name="price" value="22.79" />
	</bean>

</beans>
